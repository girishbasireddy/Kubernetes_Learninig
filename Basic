Control Plane Components  :  

                              kube-apiserver,:  The main implementation of a Kubernetes API server is kube-apiserver. kube-apiserver is designed to scale horizontally
                               etcd :            Consistent and highly-available key value store used as Kubernetes' backing store for all cluster data
                               kube-scheduler : Control plane component that watches for newly created Pods with no assigned node, and selects a node for them to run on..
                                kube-controller-manager : Control plane component that runs controller processes.
                                                          Node controller: Responsible for noticing and responding when nodes go down.
                                                           Job controller: Watches for Job objects that represent one-off tasks, then creates Pods to run those tasks to completion.
                                                            Endpoints controller: Populates the Endpoints object (that is, joins Services & Pods).
                                                            Service Account & Token controllers: Create default accounts and API access tokens for new namespaces
                                                            
Node Components  :  
                                 kubelet : An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod
                                 kube-proxy : kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept.
                                 Container runtime : The container runtime is the software that is responsible for running containers.
                                 
                                 
Addons :
                                 DNS 
                                  While the other addons are not strictly required, all Kubernetes clusters should have cluster DNS, as many examples rely on it.                                 
                                 

                                 
 Most often, you provide the information to kubectl in a .yaml file. kubectl converts the information to JSON when making the API request.

Imperative commands :
                     When using imperative commands, a user operates directly on live objects in a cluster. The user provides operations to the kubectl command as arguments or flags.
                         eX :  kubectl create deployment nginx --image nginx
  
Imperative object configuration :

                      In imperative object configuration, the kubectl command specifies the operation (create, replace, etc.), optional flags and at least one file name. The file specified must contain a full definition of the object in YAML or JSON format.
                             
                                  EX:  kubectl create -f nginx.yaml
Declarative object configuration 
                       When using declarative object configuration, a user operates on object configuration files stored locally, however the user does not define the operations to be taken on the files. Create, update, and delete operations are automatically detected per-object by kubectl. This enables working on directories, where different operations might be needed for different objects.
                             EX :  Process all object configuration files in the configs directory, and create or patch the live objects. You can first diff to see what changes are going to be made, and then apply:
                                  kubectl diff -f configs/
                                  kubectl apply -f configs
                                  
                                  
                                  
                                   
Object Names and IDs  :: , you can only have one Pod named myapp-1234 within the same namespace, but you can have one Pod and one Deployment that are each named myapp-1234.  
                            UIDS :: Every object created over the whole lifetime of a Kubernetes cluster has a distinct UID. It is intended to distinguish between historical occurrences of similar entities
                            



Namespaces             ::  
                          Kubernetes starts with four initial namespaces:
                                                                          default The default namespace for objects with no other namespace
                                                                         kube-system The namespace for objects created by the Kubernetes system
                                                                         kube-public This namespace is created automatically and is readable by all users (including those not authenticated). This namespace is mostly reserved for cluster usage, in case that some resources should be visible and readable publicly throughout the whole cluster. The public aspect of this namespace is only a convention, not a requirement.
                                                                         kube-node-lease This namespace for the lease objects associated with each node which improves the performance of the node heartbeats as the cluster scales
